#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

using namespace std;

mutex mtx;
condition_variable cv;
bool ready = false;
string message;

void sender_thread() {
    // simulate sending a message
    string msg = "Hello, world!";

    // lock the mutex and update the shared message variable
    {
        unique_lock<mutex> lock(mtx);
        message = msg;
        ready = true;
    }

    // notify the receiver thread that the message is ready
    cv.notify_one();
}

void receiver_thread() {
    // wait for the sender thread to send a message
    {
        unique_lock<mutex> lock(mtx);
        cv.wait(lock, []{ return ready; });
    }

    // display the received message
    cout << "Received message: " << message << endl;
}

int main() {
    // create the sender and receiver threads
    thread sender(sender_thread);
    thread receiver(receiver_thread);

    // join the threads and wait for them to complete
    sender.join();
    receiver.join();

    return 0;
}
